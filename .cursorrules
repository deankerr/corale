### Coding Environment

- React 19
- Next.js 15
- TypeScript 5
- Tailwind 3
- Radix UI
- shadcn/ui
- Convex

### Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

### Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

### TypeScript Usage

- Use TypeScript for all code; prefer types over interfaces.
- Use functional components with inline TypeScript types.
- `noUncheckedIndexedAccess` is in use, ensure you handle cases where a value my be undefined.

### Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

### UI and Styling

- Use Radix UI, Shadcn UI, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

### Key Conventions

- Use 'nuqs' for URL search parameter state management.

Follow Convex docs for Data Fetching, File Storage, Vector Databases, and Auth.
Follow Next.js docs for Data Fetching, Rendering, and Routing.
